pub const DIGEST_SIZE: usize = 5;
pub const DIGEST_SIZE_BYTES: usize = DIGEST_SIZE*4;
pub const BLOCK_SIZE: usize = 16;
pub const BLOCK_SIZE_BYTES: usize = BLOCK_SIZE*4;
pub const ROUNDS: usize = 80;
pub const ROUND_PHASE_SIZE: usize = 16;

pub const INITIAL_VALUES: [u32; DIGEST_SIZE] = [
    0x6745_2301,
    0xEFCD_AB89,
    0x98BA_DCFE,
    0x1032_5476,
    0xC3D2_E1F0,
];

pub const ROUND_CONSTANTS_LEFT: [u32; ROUNDS/ROUND_PHASE_SIZE] = [
    0x0000_0000,
    0x5A82_7999,
    0x6ED9_EBA1,
    0x8F1B_BCDC,
    0xA953_FD4E,
];
pub const ROUND_CONSTANTS_RIGHT: [u32; ROUNDS/ROUND_PHASE_SIZE] = [
    0x50A2_8BE6,
    0x5C4D_D124,
    0x6D70_3EF3,
    0x7A6D_76E9,
    0x0000_0000,
];

pub const MSG_SEL_IDX_LEFT: [usize; ROUNDS] = [
     0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
     7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,
     3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,
     1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,
     4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13,
];
pub const MSG_SEL_IDX_RIGHT: [usize; ROUNDS] = [
     5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,
     6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,
    15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,
     8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,
    12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11,
];

pub const ROL_AMOUNT_LEFT: [u8; ROUNDS] = [
    11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,
     7,  6,  8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,
    11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,
    11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,
     9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6,
];
pub const ROL_AMOUNT_RIGHT: [u8; ROUNDS] = [
     8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,
     9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,
     9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,
    15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,
     8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11,
];

#[cfg(test)]
/// Test vector: "abc"
pub const PADDED_TEST_INPUT_ABC: [u8; BLOCK_SIZE_BYTES] = [
    0b01100001, 0b01100010, 0b01100011, 0b10000000, 
    0b00000000, 0b00000000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b00000000, 0b00000000,
    0b00011000, 0b00000000, 0b00000000, 0b00000000, // 24 as little-endian bytes
    0b00000000, 0b00000000, 0b00000000, 0b00000000,
];

pub const TEST_INPUT_HASH_ABC: [u8; DIGEST_SIZE_BYTES] = [
    0x8E, 0xB2, 0x08, 0xF7,
    0xE0, 0x5D, 0x98, 0x7A,
    0x9B, 0x04, 0x4A, 0x8E,
    0x98, 0xC6, 0xB0, 0x87,
    0xF1, 0x5A, 0x0B, 0xFC,
];

/// Test vector: "abcdefghijklmnopqrstuvwxyz"
pub const PADDED_TEST_INPUT_A2Z: [u8; BLOCK_SIZE_BYTES] = [
    0b01100001, 0b01100010, 0b01100011, 0b01100100,
    0b01100101, 0b01100110, 0b01100111, 0b01101000,
    0b01101001, 0b01101010, 0b01101011, 0b01101100,
    0b01101101, 0b01101110, 0b01101111, 0b01110000,
    0b01110001, 0b01110010, 0b01110011, 0b01110100,
    0b01110101, 0b01110110, 0b01110111, 0b01111000,
    0b01111001, 0b01111010, 0b10000000, 0b00000000,
    0b00000000, 0b00000000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b00000000, 0b00000000,
    0b00000000, 0b00000000, 0b00000000, 0b00000000,
    0b11010000, 0b00000000, 0b00000000, 0b00000000, // 26*8 = 208 as little-endian bytes
    0b00000000, 0b00000000, 0b00000000, 0b00000000,
];

pub const TEST_INPUT_HASH_A2Z: [u8; DIGEST_SIZE_BYTES] = [
    0xF7, 0x1C, 0x27, 0x10,
    0x9C, 0x69, 0x2C, 0x1B,
    0x56, 0xBB, 0xDC, 0xEB,
    0x5B, 0x9D, 0x28, 0x65,
    0xB3, 0x70, 0x8D, 0xBC,
];
